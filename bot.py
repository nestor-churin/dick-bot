from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums import ChatMemberStatus
from datetime import datetime, timedelta
import yaml
import aiosqlite
import aiofiles
import asyncio
import random
import string

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
reset_requests = {}

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
async def load_config():
    async with aiofiles.open("config.yaml", "r") as file:
        content = await file.read()
        return yaml.safe_load(content)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
async def init_db():
    async with aiosqlite.connect("dick.db") as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS sizes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                userid INTEGER,
                chatid INTEGER,
                username TEXT,
                expire_date TEXT,
                size INTEGER,
                UNIQUE(userid, chatid)
            )
        ''')
        await db.commit()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(client, message):
    # –Ø–∫—â–æ ID —á–∞—Ç—É –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π - —Ü–µ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç
    if message.chat.id > 0:
        return False
    
    chat_member = await client.get_chat_member(message.chat.id, message.from_user.id)
    return chat_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]

# –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —á–∞—Ç —î –ø—Ä–∏–≤–∞—Ç–Ω–∏–º
def is_private_chat(chat_id):
    return chat_id > 0

# –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–¥ –¥–ª—è –∫–∞–ø—á—ñ
def generate_captcha_code():
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

# –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∫–æ–Ω—Ñ—ñ–≥—É —Ç–∞ –ë–î –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
async def main():
    global config
    config = await load_config()
    await init_db()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    bot = Client(
        "dick_bot",
        api_id=config["API_ID"],
        api_hash=config["API_HASH"],
        bot_token=config["BOT_TOKEN"]
    )

    # –ö–æ–º–∞–Ω–¥–∞ /start
    @bot.on_message(filters.command("start"))
    async def start(client, message):
        await message.reply(f"""**Dick Bot | {config["bot_version"]}**
–ë–æ—Ç –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö. –†–∞–∑ –≤ 24 –≥–æ–¥–∏–Ω–∏ –≥—Ä–∞–≤–µ—Ü—å –º–æ–∂–µ –ø—Ä–æ–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É /dick, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä.
–ù–∞—Ä–∞–∑—ñ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥ {config["random_min"]} –¥–æ {config["random_max"]} —Å–º.
–Ø–∫—â–æ —É —Ç–µ–±–µ —î –ø–∏—Ç–∞–Ω–Ω—è ‚Äî –ø–∏—à–∏ /help.""")

    # –ö–æ–º–∞–Ω–¥–∞ /help
    @bot.on_message(filters.command("help"))
    async def help(client, message):
        await message.reply("""**–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:**
- /dick ‚Äî –≤–∏—Ä–æ—â—É–≤–∞—Ç–∏/–∑–º–µ–Ω—à—É–≤–∞—Ç–∏ –ø—ñ—Å—å–∫—É.
- /top_dick ‚Äî —Ç–æ–ø 10 –ø—ñ—Å—å–æ–∫ —É –≥—Ä—É–ø—ñ.
- /global_top ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø 10 –≥—Ä–∞–≤—Ü—ñ–≤.
- /tos ‚Äî –ü–æ–ªi—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
- /reset ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç (–ª–∏—à–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º).""")


    @bot.on_message(filters.command("tos"))
    async def tos(client, message):
        if message.chat.id < 0:
            bot.reply_to(message, "–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.")
            return
        await message.reply("""**–ü–æ–ªi—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è**

**1. –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–ª–æ–∂–µ–Ω–Ω—è**
–¶–µ–π –±–æ—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–∏–∫–ª—é—á–Ω–æ –∑ —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–æ—é –º–µ—Ç–æ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–æ—Ç–∞, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ —Ü–∏–º–∏ —É–º–æ–≤–∞–º–∏.

**2. –í—ñ–∫–æ–≤—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è**
–ë–æ—Ç –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–∏—à–µ –æ—Å–æ–±–∞–º, —è–∫—ñ –¥–æ—Å—è–≥–ª–∏ 16-—Ä—ñ—á–Ω–æ–≥–æ –≤—ñ–∫—É. –Ø–∫—â–æ –≤–∞–º –º–µ–Ω—à–µ 16 —Ä–æ–∫—ñ–≤, –≤–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º. –ê–≤—Ç–æ—Ä –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –π–æ–≥–æ –æ—Å–æ–±–∞–º–∏, —è–∫—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤—ñ–∫–æ–≤–æ–º—É –æ–±–º–µ–∂–µ–Ω–Ω—é.

**3. –ó–±—ñ—Ä —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö**
–ë–æ—Ç –∑–±–µ—Ä—ñ–≥–∞—î —Ç–∞–∫—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
- –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram (User ID)
- –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (Username)
- –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —á–∞—Ç—É (Chat ID)
- –ß–∞—Å –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º

–¶—ñ –¥–∞–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞. –ê–≤—Ç–æ—Ä –±–æ—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—î —Ü—ñ –¥–∞–Ω—ñ —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ó—Ö –¥–ª—è —ñ–Ω—à–∏—Ö —Ü—ñ–ª–µ–π.

**4. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å**
–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –±—É–¥—å-—è–∫–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞, –∞ —Ç–∞–∫–æ–∂ –∑–∞ –±—É–¥—å-—è–∫—ñ –º–æ–∂–ª–∏–≤—ñ –Ω–∞—Å–ª—ñ–¥–∫–∏ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ —î –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–∏–º, —ñ –∫–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ—Ä–µ –Ω–∞ —Å–µ–±–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ —Å–≤–æ—ó –¥—ñ—ó.

**5. –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö**
–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤–æ—ó –¥–∞–Ω—ñ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≥—Ä—É–ø–∏, –¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –±–æ—Ç, –∞–±–æ –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º.

**6. –ó–º—ñ–Ω–∏ –≤ —É–º–æ–≤–∞—Ö**
–ê–≤—Ç–æ—Ä –∑–∞–ª–∏—à–∞—î –∑–∞ —Å–æ–±–æ—é –ø—Ä–∞–≤–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ü—é –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ —Ç–∞ —É–º–æ–≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å –±–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ê–∫—Ç—É–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–∂–¥–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ—é –≤ –æ–ø–∏—Å—ñ –±–æ—Ç–∞.

**7. –ö–æ–Ω—Ç–∞–∫—Ç–∏**
–Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ –π–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ, –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É –∫–∞–Ω–∞–ª—ñ @nestor_churin

""")

    # –ö–æ–º–∞–Ω–¥–∞ /dick
    @bot.on_message(filters.command("dick"))
    async def dick(client, message):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –≥—Ä—É–ø–æ–≤–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
        if is_private_chat(message.chat.id):
            await message.reply("–ë–æ—Ç –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!")
            return
            
        user_id = message.from_user.id
        chat_id = message.chat.id
        username = message.from_user.username or f"user{user_id}"
        current_time = datetime.now()

        async with aiosqlite.connect("dick.db") as db:
            async with db.execute("SELECT size, expire_date FROM sizes WHERE userid = ? AND chatid = ?", (user_id, chat_id)) as cursor:
                result = await cursor.fetchone()

            if result:
                current_size, expire_date = result
                if expire_date:
                    expire_time = datetime.strptime(expire_date, "%Y-%m-%d %H:%M:%S")
                    if current_time < expire_time:
                        remaining_time = expire_time - current_time
                        hours, remainder = divmod(int(remaining_time.total_seconds()), 3600)
                        minutes, seconds = divmod(remainder, 60)
                        time_str = f"{hours} –≥–æ–¥. {minutes} —Ö–≤. {seconds} —Å–µ–∫."
                        
                        await message.reply(f"""{username}, —Ç–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ —Ü—é –∫–æ–º–∞–Ω–¥—É.
–†–æ–∑–º—ñ—Ä —Ç–≤–æ–≥–æ –ø—ñ—Å—é–Ω–∞: {current_size} —Å–º.
–ù–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {time_str}.""")
                        return
                else:
                    current_size = 0
            else:
                current_size = 0

            # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä
            size_change = random.randint(config["random_min"], config["random_max"])
            new_size = max(0, current_size + size_change)

            # –û–Ω–æ–≤–ª—é—î–º–æ –ë–î
            expire_new = (current_time + timedelta(hours=24)).strftime("%Y-%m-%d %H:%M:%S")
            await db.execute(
                "REPLACE INTO sizes (userid, chatid, username, expire_date, size) VALUES (?, ?, ?, ?, ?)",
                (user_id, chat_id, username, expire_new, new_size)
            )
            await db.commit()

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ —É –≥—Ä—É–ø—ñ
            async with db.execute("SELECT userid, size FROM sizes WHERE chatid = ? ORDER BY size DESC", (chat_id,)) as cursor:
                ranking = await cursor.fetchall()

            rank = next((i + 1 for i, (uid, sz) in enumerate(ranking) if uid == user_id), len(ranking))
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            emoji = "üìà" if size_change > 0 else "üìâ"
            message_text = f"{username}, —Ç–≤—ñ–π –ø—ñ—Å—é–Ω {'–≤–∏—Ä—ñ—Å –Ω–∞' if size_change > 0 else '–∑–º–µ–Ω—à–∏–≤—Å—è –Ω–∞'} {abs(size_change)} —Å–º {emoji}\n"
            message_text += f"–¢–µ–ø–µ—Ä –≤—ñ–Ω {new_size} —Å–º.\n"
            message_text += f"–¢–∏ –∑–∞–π–º–∞—î—à {rank}-–µ –º—ñ—Å—Ü–µ –≤ –≥—Ä—É–ø—ñ.\n"
            message_text += f"–¢–≤–æ—è –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ –≤ {expire_new} –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º."
            
            await message.reply(message_text)

    # –ö–æ–º–∞–Ω–¥–∞ /top_dick - —Ç–æ–ø 10 —É –ø–æ—Ç–æ—á–Ω–æ–º—É —á–∞—Ç—ñ
    @bot.on_message(filters.command("top_dick"))
    async def top_dick(client, message):
        if is_private_chat(message.chat.id):
            await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!")
            return
            
        chat_id = message.chat.id
        
        async with aiosqlite.connect("dick.db") as db:
            async with db.execute(
                "SELECT userid, username, size FROM sizes WHERE chatid = ? ORDER BY size DESC LIMIT 10", 
                (chat_id,)
            ) as cursor:
                top_users = await cursor.fetchall()
        
        if not top_users:
            await message.reply("–£ —Ü—å–æ–º—É —á–∞—Ç—ñ —â–µ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤!")
            return
            
        top_message = "**üèÜ –¢–æ–ø 10 –ø—ñ—Å—é–Ω—ñ–≤ —É —á–∞—Ç—ñ:**\n\n"
        
        for idx, (userid, username, size) in enumerate(top_users, 1):
            medal = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
            top_message += f"{medal} {username}: {size} —Å–º\n"
        
        await message.reply(top_message)

    # –ö–æ–º–∞–Ω–¥–∞ /global_top - –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø 10
    @bot.on_message(filters.command("global_top"))
    async def global_top(client, message):
        async with aiosqlite.connect("dick.db") as db:
            async with db.execute(
                """SELECT username, MAX(size) as max_size 
                   FROM sizes 
                   GROUP BY userid 
                   ORDER BY max_size DESC 
                   LIMIT 10"""
            ) as cursor:
                global_top_users = await cursor.fetchall()
        
        if not global_top_users:
            await message.reply("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤!")
            return
            
        top_message = "**üåç –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç–æ–ø 10 –ø—ñ—Å—é–Ω—ñ–≤:**\n\n"
        
        for idx, (username, size) in enumerate(global_top_users, 1):
            medal = "ü•á" if idx == 1 else "ü•à" if idx == 2 else "ü•â" if idx == 3 else f"{idx}."
            top_message += f"{medal} {username}: {size} —Å–º\n"
        
        await message.reply(top_message)

    # –ö–æ–º–∞–Ω–¥–∞ /reset - —Å–∫–∏–¥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ (–ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
    @bot.on_message(filters.command("reset"))
    async def reset(client, message):
        if is_private_chat(message.chat.id):
            await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!")
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–∏
        if not await is_admin(client, message):
            await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏!")
            return
            
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–∞–ø—á—É
        captcha_code = generate_captcha_code()
        reset_requests[f"{chat_id}_{user_id}"] = captcha_code
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        keyboard = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_reset_{chat_id}"),
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_reset_{chat_id}")
                ]
            ]
        )
        
        await message.reply(
            f"‚ö†Ô∏è **–£–í–ê–ì–ê!** ‚ö†Ô∏è\n\n"
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É?\n"
            f"–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞ —ñ –≤–∏–¥–∞–ª–∏—Ç—å —É—Å—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–æ–∑–º—ñ—Ä–∏ –ø—ñ—Å—é–Ω—ñ–≤ —É —Ü—å–æ–º—É —á–∞—Ç—ñ.\n\n"
            f"–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Ü–µ–π –∫–æ–¥: **{captcha_code}**",
            reply_markup=keyboard
        )

    # –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ reset
    @bot.on_callback_query(filters.regex(r"^(confirm|cancel)_reset_"))
    async def reset_callback(client, callback_query):
        action, _, chat_id_str = callback_query.data.split("_", 2)
        chat_id = int(chat_id_str)
        user_id = callback_query.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_user_admin = False
        try:
            chat_member = await client.get_chat_member(chat_id, user_id)
            is_user_admin = chat_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
        except Exception:
            pass
        
        if not is_user_admin:
            await callback_query.answer("–¶—è –¥—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏!", show_alert=True)
            return
        
        if action == "cancel":
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è
            key = f"{chat_id}_{user_id}"
            if key in reset_requests:
                del reset_requests[key]
            
            await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –î–∞–Ω—ñ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω.")
            await callback_query.answer("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        else:  # confirm
            # –¢—É—Ç –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥-–∫–∞–ø—á—É
            await callback_query.message.edit_text(
                "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –±—É–≤ –ø–æ–∫–∞–∑–∞–Ω–∏–π —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n"
                "–í–≤–µ–¥—ñ—Ç—å /captcha –ö–û–î (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /captcha ABC123)"
            )
            await callback_query.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è")
    
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ –∑ –∫–∞–ø—á–µ—é
    @bot.on_message(filters.command("captcha"))
    async def captcha_verification(client, message):
        if is_private_chat(message.chat.id):
            return
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–∏
        if not await is_admin(client, message):
            await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–∏!")
            return
        
        chat_id = message.chat.id
        user_id = message.from_user.id
        key = f"{chat_id}_{user_id}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Ç
        if key not in reset_requests:
            await message.reply("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö!")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π –∫–æ–¥
        parts = message.text.split(" ", 1)
        if len(parts) != 2:
            await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /captcha –ö–û–î")
            return
        
        entered_code = parts[1].strip().upper()
        expected_code = reset_requests[key]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥
        if entered_code != expected_code:
            await message.reply("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥! –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            del reset_requests[key]
            return
        
        # –ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, –≤–∏–∫–æ–Ω—É—î–º–æ —Å–∫–∏–¥–∞–Ω–Ω—è
        async with aiosqlite.connect("dick.db") as db:
            await db.execute("DELETE FROM sizes WHERE chatid = ?", (chat_id,))
            await db.commit()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Ç
        del reset_requests[key]
        
        await message.reply("‚úÖ –ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í—Å—ñ –¥–∞–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")

    # –ö–æ–º–∞–Ω–¥–∞ /my_dick - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–ª–∞—Å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    @bot.on_message(filters.command("my_dick"))
    async def my_dick(client, message):
        if is_private_chat(message.chat.id):
            await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!")
            return
            
        user_id = message.from_user.id
        chat_id = message.chat.id
        username = message.from_user.username or f"user{user_id}"
        
        async with aiosqlite.connect("dick.db") as db:
            async with db.execute(
                "SELECT size, expire_date FROM sizes WHERE userid = ? AND chatid = ?", 
                (user_id, chat_id)
            ) as cursor:
                result = await cursor.fetchone()
        
        if not result:
            await message.reply(f"{username}, —Ç–∏ —â–µ –Ω–µ –±—Ä–∞–≤ —É—á–∞—Å—Ç—ñ —É –≥—Ä—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /dick!")
            return
            
        size, expire_date = result
        current_time = datetime.now()
        expire_time = datetime.strptime(expire_date, "%Y-%m-%d %H:%M:%S")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏
        if current_time < expire_time:
            remaining_time = expire_time - current_time
            hours, remainder = divmod(int(remaining_time.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            time_str = f"{hours} –≥–æ–¥. {minutes} —Ö–≤. {seconds} —Å–µ–∫."
            cooldown_msg = f"–ù–∞—Å—Ç—É–ø–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {time_str}."
        else:
            cooldown_msg = "–¢–∏ –º–æ–∂–µ—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–æ–º–∞–Ω–¥–æ—é /dick –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!"
        
        async with aiosqlite.connect("dick.db") as db:
            async with db.execute(
                "SELECT COUNT(*) FROM sizes WHERE chatid = ? AND size > ?", 
                (chat_id, size)
            ) as cursor:
                rank = (await cursor.fetchone())[0] + 1
        
        message_text = f"{username}, —Ä–æ–∑–º—ñ—Ä —Ç–≤–æ–≥–æ –ø—ñ—Å—é–Ω–∞: {size} —Å–º.\n"
        message_text += f"–¢–≤—ñ–π —Ä–∞–Ω–≥: {rank} —É —Ü—å–æ–º—É —á–∞—Ç—ñ.\n"
        message_text += cooldown_msg
        
        await message.reply(message_text)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.start()
    print(f"Bot started! Version: {config['bot_version']}")
    
    # –¢—Ä–∏–º–∞—î–º–æ –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∏–º
    await asyncio.Event().wait()

# –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π main()
if __name__ == "__main__":
    asyncio.run(main())